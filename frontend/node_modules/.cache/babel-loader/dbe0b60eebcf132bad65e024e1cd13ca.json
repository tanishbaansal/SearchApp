{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanis\\\\Desktop\\\\assignment\\\\searchapp\\\\src\\\\components\\\\SearchBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBox = () => {\n  _s();\n\n  const [companies, setCompanies] = useState([]);\n\n  const handleChange = async event => {\n    //Fetching Data from api\n    const res = await axios.post(`http://localhost:3001`, {\n      companyName: event.target.value.toLowerCase()\n    }, {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n    let companyList = [];\n    let matchString = /<.*id=\"(.*)\".*>(.*)<\\/div>/;\n\n    for (let i of res.data.split(\"\\n\")) {\n      let sanitizedData = i.replace(/(\\t\\n)|(\\n\\t)|(\\t)/gm, '');\n      let matchStringWithI = i.match(matchString);\n\n      if (sanitizedData.length > 0) {\n        companyList.push({\n          \"name\": matchStringWithI[2],\n          \"link\": matchStringWithI[1]\n        });\n      }\n    }\n\n    setCompanies(companyList); // setCompanies(res.data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"free-solo-demo\",\n    onChange: handleChange,\n    options: companies.map(option => option.name),\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      onChange: handleChange,\n      ...params,\n      label: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBox, \"n6Folx/Fj4vk1YkdemQRRK+Pw+Q=\");\n\n_c = SearchBox;\nexport default SearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"names":["React","useState","TextField","Autocomplete","axios","SearchBox","companies","setCompanies","handleChange","event","res","post","companyName","target","value","toLowerCase","headers","companyList","matchString","i","data","split","sanitizedData","replace","matchStringWithI","match","length","push","map","option","name","params"],"sources":["C:/Users/tanis/Desktop/assignment/searchapp/src/components/SearchBox.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport axios from \"axios\";\r\n\r\nconst SearchBox = () => {\r\n    const [companies, setCompanies] = useState([]);\r\n    const handleChange = async (event) => {\r\n\r\n        //Fetching Data from api\r\n        const res = await axios.post(\r\n            `http://localhost:3001`,\r\n            { companyName: event.target.value.toLowerCase() },\r\n            {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            }\r\n        );\r\n        let companyList = []\r\n        let matchString = /<.*id=\"(.*)\".*>(.*)<\\/div>/\r\n        for(let i of res.data.split(\"\\n\")){\r\n          let sanitizedData = i.replace(/(\\t\\n)|(\\n\\t)|(\\t)/gm,'')\r\n          let matchStringWithI = i.match(matchString)\r\n          if(sanitizedData.length>0){\r\n            companyList.push({\r\n              \"name\":matchStringWithI[2],\r\n              \"link\":matchStringWithI[1]\r\n            })\r\n          }\r\n        }\r\n        setCompanies(companyList)\r\n        // setCompanies(res.data);\r\n    };\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"free-solo-demo\"\r\n            onChange={handleChange}\r\n            options={companies.map((option) => option.name)}\r\n            renderInput={(params) => (\r\n                <TextField onChange={handleChange} {...params} label=\"Search\" />\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;;EACA,MAAMO,YAAY,GAAG,MAAOC,KAAP,IAAiB;IAElC;IACA,MAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CACb,uBADa,EAEd;MAAEC,WAAW,EAAEH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmBC,WAAnB;IAAf,CAFc,EAGd;MACIC,OAAO,EAAE;QACL,gBAAgB;MADX;IADb,CAHc,CAAlB;IASA,IAAIC,WAAW,GAAG,EAAlB;IACA,IAAIC,WAAW,GAAG,4BAAlB;;IACA,KAAI,IAAIC,CAAR,IAAaT,GAAG,CAACU,IAAJ,CAASC,KAAT,CAAe,IAAf,CAAb,EAAkC;MAChC,IAAIC,aAAa,GAAGH,CAAC,CAACI,OAAF,CAAU,sBAAV,EAAiC,EAAjC,CAApB;MACA,IAAIC,gBAAgB,GAAGL,CAAC,CAACM,KAAF,CAAQP,WAAR,CAAvB;;MACA,IAAGI,aAAa,CAACI,MAAd,GAAqB,CAAxB,EAA0B;QACxBT,WAAW,CAACU,IAAZ,CAAiB;UACf,QAAOH,gBAAgB,CAAC,CAAD,CADR;UAEf,QAAOA,gBAAgB,CAAC,CAAD;QAFR,CAAjB;MAID;IACF;;IACDjB,YAAY,CAACU,WAAD,CAAZ,CAxBkC,CAyBlC;EACH,CA1BD;;EA4BA,oBACI,QAAC,YAAD;IACI,EAAE,EAAC,gBADP;IAEI,QAAQ,EAAET,YAFd;IAGI,OAAO,EAAEF,SAAS,CAACsB,GAAV,CAAeC,MAAD,IAAYA,MAAM,CAACC,IAAjC,CAHb;IAII,WAAW,EAAGC,MAAD,iBACT,QAAC,SAAD;MAAW,QAAQ,EAAEvB,YAArB;MAAA,GAAuCuB,MAAvC;MAA+C,KAAK,EAAC;IAArD;MAAA;MAAA;MAAA;IAAA;EALR;IAAA;IAAA;IAAA;EAAA,QADJ;AAUH,CAxCD;;GAAM1B,S;;KAAAA,S;AA0CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}