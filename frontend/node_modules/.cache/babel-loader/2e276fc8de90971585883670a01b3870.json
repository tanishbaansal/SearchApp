{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanis\\\\Desktop\\\\assignment\\\\searchapp\\\\src\\\\components\\\\SearchBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport axios from \"axios\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nconst SearchBox = () => {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [companies, setCompanies] = useState([]);\n  const loading = open && companies.length === 0;\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      // await sleep(1e3); // For demo purposes.\n      if (active) {\n        setCompanies([...companies]);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(() => {\n    if (!open) {\n      setCompanies([]);\n    }\n  }, [open]);\n\n  const handleChange = async event => {\n    //Fetching Data from api\n    const res = await axios.post(`http://localhost:3001`, {\n      companyName: event.target.value.toLowerCase()\n    }, {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n    let companyList = [];\n    let matchString = /<.*id=\"(.*)\".*>(.*)<\\/div>/;\n\n    for (let i of res.data.split(\"\\n\")) {\n      //Sanitizing the data like removing html tags and extra tags\n      let sanitizedData = i.replace(/(\\t\\n)|(\\n\\t)|(\\t)/gm, \"\"); //Getting the required data from string using regex\n\n      let matchStringWithI = i.match(matchString);\n\n      if (sanitizedData.length > 0) {\n        companyList.push({\n          name: matchStringWithI[2],\n          link: matchStringWithI[1]\n        });\n      }\n    }\n\n    setCompanies(companyList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    loading: loading,\n    isOptionEqualToValue: (companies, value) => companies.name === value.title,\n    getOptionLabel: companies => companies.name,\n    options: companies,\n    renderInput: params => /*#__PURE__*/_createElement(TextField, {\n      onChange: handleChange,\n      ...params,\n      key: \"1\",\n      label: \"Asynchronous\",\n      InputProps: { ...params.InputProps,\n        endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"inherit\",\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 37\n          }, this) : null, params.InputProps.endAdornment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }, this)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBox, \"BkIoGXk6bODMSVJQEgxTXWPlBu0=\");\n\n_c = SearchBox;\nexport default SearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"names":["React","useState","TextField","Autocomplete","axios","CircularProgress","SearchBox","open","setOpen","companies","setCompanies","loading","length","useEffect","active","undefined","handleChange","event","res","post","companyName","target","value","toLowerCase","headers","companyList","matchString","i","data","split","sanitizedData","replace","matchStringWithI","match","push","name","link","title","params","InputProps","endAdornment"],"sources":["C:/Users/tanis/Desktop/assignment/searchapp/src/components/SearchBox.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport axios from \"axios\";\r\n\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nconst SearchBox = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [companies, setCompanies] = useState([]);\r\n\r\n    const loading = open && companies.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            // await sleep(1e3); // For demo purposes.\r\n\r\n            if (active) {\r\n              setCompanies([...companies]);\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setCompanies([]);\r\n        }\r\n    }, [open]);\r\n    const handleChange = async (event) => {\r\n        //Fetching Data from api\r\n        const res = await axios.post(\r\n            `http://localhost:3001`,\r\n            { companyName: event.target.value.toLowerCase() },\r\n            {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            }\r\n        );\r\n        let companyList = [];\r\n        let matchString = /<.*id=\"(.*)\".*>(.*)<\\/div>/;\r\n\r\n        for (let i of res.data.split(\"\\n\")) {\r\n            //Sanitizing the data like removing html tags and extra tags\r\n            let sanitizedData = i.replace(/(\\t\\n)|(\\n\\t)|(\\t)/gm, \"\");\r\n\r\n            //Getting the required data from string using regex\r\n            let matchStringWithI = i.match(matchString);\r\n            if (sanitizedData.length > 0) {\r\n                companyList.push({\r\n                    name: matchStringWithI[2],\r\n                    link: matchStringWithI[1],\r\n                });\r\n            }\r\n        }\r\n        setCompanies(companyList);\r\n    };\r\n\r\n    return (\r\n        <Autocomplete\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n            }}\r\n            loading={loading}\r\n            isOptionEqualToValue={(companies, value) => companies.name === value.title}\r\n            getOptionLabel={(companies) => companies.name}\r\n            options={companies}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                \r\n                    onChange={handleChange}\r\n                    {...params} \r\n                    key=\"1\"\r\n                    label=\"Asynchronous\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? (\r\n                                    <CircularProgress\r\n                                        color=\"inherit\"\r\n                                        size={20}\r\n                                    />\r\n                                ) : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,gCAA7B;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxB;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;EAEA,MAAMU,OAAO,GAAGJ,IAAI,IAAIE,SAAS,CAACG,MAAV,KAAqB,CAA7C;EAEAZ,KAAK,CAACa,SAAN,CAAgB,MAAM;IAClB,IAAIC,MAAM,GAAG,IAAb;;IAEA,IAAI,CAACH,OAAL,EAAc;MACV,OAAOI,SAAP;IACH;;IAED,CAAC,YAAY;MACT;MAEA,IAAID,MAAJ,EAAY;QACVJ,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;MACD;IACJ,CAND;;IAQA,OAAO,MAAM;MACTK,MAAM,GAAG,KAAT;IACH,CAFD;EAGH,CAlBD,EAkBG,CAACH,OAAD,CAlBH;EAoBAX,KAAK,CAACa,SAAN,CAAgB,MAAM;IAClB,IAAI,CAACN,IAAL,EAAW;MACPG,YAAY,CAAC,EAAD,CAAZ;IACH;EACJ,CAJD,EAIG,CAACH,IAAD,CAJH;;EAKA,MAAMS,YAAY,GAAG,MAAOC,KAAP,IAAiB;IAClC;IACA,MAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAN,CACb,uBADa,EAEd;MAAEC,WAAW,EAAEH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmBC,WAAnB;IAAf,CAFc,EAGd;MACIC,OAAO,EAAE;QACL,gBAAgB;MADX;IADb,CAHc,CAAlB;IASA,IAAIC,WAAW,GAAG,EAAlB;IACA,IAAIC,WAAW,GAAG,4BAAlB;;IAEA,KAAK,IAAIC,CAAT,IAAcT,GAAG,CAACU,IAAJ,CAASC,KAAT,CAAe,IAAf,CAAd,EAAoC;MAChC;MACA,IAAIC,aAAa,GAAGH,CAAC,CAACI,OAAF,CAAU,sBAAV,EAAkC,EAAlC,CAApB,CAFgC,CAIhC;;MACA,IAAIC,gBAAgB,GAAGL,CAAC,CAACM,KAAF,CAAQP,WAAR,CAAvB;;MACA,IAAII,aAAa,CAAClB,MAAd,GAAuB,CAA3B,EAA8B;QAC1Ba,WAAW,CAACS,IAAZ,CAAiB;UACbC,IAAI,EAAEH,gBAAgB,CAAC,CAAD,CADT;UAEbI,IAAI,EAAEJ,gBAAgB,CAAC,CAAD;QAFT,CAAjB;MAIH;IACJ;;IACDtB,YAAY,CAACe,WAAD,CAAZ;EACH,CA5BD;;EA8BA,oBACI,QAAC,YAAD;IACI,IAAI,EAAElB,IADV;IAEI,MAAM,EAAE,MAAM;MACVC,OAAO,CAAC,IAAD,CAAP;IACH,CAJL;IAKI,OAAO,EAAE,MAAM;MACXA,OAAO,CAAC,KAAD,CAAP;IACH,CAPL;IAQI,OAAO,EAAEG,OARb;IASI,oBAAoB,EAAE,CAACF,SAAD,EAAYa,KAAZ,KAAsBb,SAAS,CAAC0B,IAAV,KAAmBb,KAAK,CAACe,KATzE;IAUI,cAAc,EAAG5B,SAAD,IAAeA,SAAS,CAAC0B,IAV7C;IAWI,OAAO,EAAE1B,SAXb;IAYI,WAAW,EAAG6B,MAAD,iBACT,eAAC,SAAD;MAEI,QAAQ,EAAEtB,YAFd;MAAA,GAGQsB,MAHR;MAII,GAAG,EAAC,GAJR;MAKI,KAAK,EAAC,cALV;MAMI,UAAU,EAAE,EACR,GAAGA,MAAM,CAACC,UADF;QAERC,YAAY,eACR,QAAC,KAAD,CAAO,QAAP;UAAA,WACK7B,OAAO,gBACJ,QAAC,gBAAD;YACI,KAAK,EAAC,SADV;YAEI,IAAI,EAAE;UAFV;YAAA;YAAA;YAAA;UAAA,QADI,GAKJ,IANR,EAOK2B,MAAM,CAACC,UAAP,CAAkBC,YAPvB;QAAA;UAAA;UAAA;UAAA;QAAA;MAHI,CANhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA;EAbR;IAAA;IAAA;IAAA;EAAA,QADJ;AAsCH,CAnGD;;GAAMlC,S;;KAAAA,S;AAqGN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}